#!/usr/bin/env ruby
require 'assertthat-bdd'
require 'optparse'

VERSION = '1.0.2'

options = {}
OptionParser.new do |opt|
  opt.on('-a','--accessKey ACCESS_KEY', 'Access key same as env variable ASSERTTHAT_ACCESS_KEY') { |o| options[:accessKey] = o }
  opt.on('-s','--secretKey SECRET_KEY', 'Secret key same as env variable ASSERTTHAT_SECRET_KEY') { |o| options[:secretKey] = o }
  opt.on('-p','--projectId PROJECT_ID', 'Jira project id') { |o| options[:projectId] = o }
  opt.on('-o','--outputFolder OUTPUT_FOLDER', 'Featured output folder - default ./features') { |o| options[:outputFolder] = o }
  opt.on('-m','--mode MODE', 'Mode one of automated,manual,both - deafult automated') { |o| options[:mode] = o }
  opt.on('-j','--jql JQL_FILTER', 'Jql issues filter') { |o| options[:jql] = o }
  opt.on('-x','--proxy PROXY_URL', 'proxy url to connect to Jira') { |o| options[:proxy] = o }
  opt.on_tail('-h', '--help', 'Show help') do
  	puts opt
  	exit
  end
  opt.on_tail('-v','--version', 'Show version') do
  	puts VERSION
    exit
  end
end.parse!

raise OptionParser::MissingArgument, "'projectId' option is not specified" if options[:projectId].nil?

AssertThatBDD::Features.download(options)

 
  